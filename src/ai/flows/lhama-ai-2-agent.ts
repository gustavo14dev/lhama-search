'use server';
/**
 * @fileOverview Lhama AI 2 agent, a default AI agent for the Lhama Search platform.
 *
 * - lhamaAI2Agent - A function that processes user queries and returns AI-generated responses.
 * - LhamaAI2AgentInput - The input type for the lhamaAI2Agent function.
 * - LhamaAI2AgentOutput - The return type for the lhamaAI2Agent function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import { promises as fs } from 'fs';

// Use a relative path from the project root.
const trainingFilePath = 'src/ai/training.json';

type TrainingData = Record<string, string>;

async function readTrainingData(): Promise<TrainingData> {
  try {
    const data = await fs.readFile(trainingFilePath, 'utf-8');
    return JSON.parse(data);
  } catch (error) {
    if ((error as NodeJS.ErrnoException).code === 'ENOENT') {
      return {};
    }
    console.error('Error reading training data:', error);
    return {};
  }
}

async function writeTrainingData(data: TrainingData): Promise<void> {
  try {
    await fs.writeFile(trainingFilePath, JSON.stringify(data, null, 2), 'utf-8');
  } catch (error) {
    console.error('Error writing training data:', error);
  }
}

// Defini√ß√£o da ferramenta para chamar a Google Custom Search API
const customGoogleSearch = ai.defineTool(
  {
    name: 'customGoogleSearch',
    description: 'Searches the web using Google Custom Search API. Use this for recent events or topics outside of common knowledge.',
    inputSchema: z.object({ query: z.string() }),
    outputSchema: z.any(),
  },
  async (input) => {
    const apiKey = process.env.GOOGLE_API_KEY;
    const searchEngineId = process.env.GOOGLE_CSE_ID;

    if (!apiKey || !searchEngineId) {
      console.error("Google API Key or Search Engine ID is not configured.");
      return { error: "Search API is not configured." };
    }

    const url = `https://www.googleapis.com/customsearch/v1?key=${apiKey}&cx=${searchEngineId}&q=${encodeURIComponent(input.query)}`;

    try {
      const response = await fetch(url);
      if (!response.ok) {
        const errorData = await response.json();
        console.error('Google Custom Search API error:', errorData);
        return { error: `API request failed with status ${response.status}` };
      }
      const data = await response.json();
      // Mapeia os resultados para o formato esperado pelo resto do c√≥digo
      return (data.items || []).map((item: any) => ({
        title: item.title,
        link: item.link,
        snippet: item.snippet,
        pagemap: item.pagemap,
      }));
    } catch (err) {
      console.error('Error fetching search results:', err);
      return { error: 'Failed to fetch search results.' };
    }
  }
);


const LhamaAI2AgentInputSchema = z.object({
  query: z.string().describe('A pergunta do usu√°rio a ser processada pelo agente de IA.'),
  mode: z.enum(['chat', 'search']).default('chat').describe('O modo de opera√ß√£o: "chat" para conversa padr√£o ou "search" para pesquisa na web.'),
});
export type LhamaAI2AgentInput = z.infer<typeof LhamaAI2AgentInputSchema>;

const LhamaAI2AgentOutputSchema = z.object({
  response: z.string().describe('A resposta gerada pela IA para a pergunta do usu√°rio, formatada em HTML.'),
  searchResults: z.array(z.object({
    title: z.string(),
    link: z.string(),
    snippet: z.string(),
    pagemap: z.object({
      cse_thumbnail: z.array(z.object({ src: z.string() })).optional(),
      metatags: z.array(z.object({ 'og:site_name': z.string().optional() })).optional(),
    }).optional(),
  })).optional().describe('Resultados da pesquisa na web, se aplic√°vel.'),
});
export type LhamaAI2AgentOutput = z.infer<typeof LhamaAI2AgentOutputSchema>;

export async function lhamaAI2Agent(input: LhamaAI2AgentInput): Promise<LhamaAI2AgentOutput> {
  if (input.mode === 'search') {
    return webSearchAgentFlow(input);
  }
  return lhamaAI2AgentFlow(input);
}

const chatPrompt = ai.definePrompt({
  name: 'lhamaAI2AgentChatPrompt',
  input: { schema: LhamaAI2AgentInputSchema },
  output: { schema: LhamaAI2AgentOutputSchema },
  prompt: `Voc√™ √© a Lhama AI 2, uma assistente de IA da empresa Lhama, uma empresa de alta tecnologia da DIFA. Voc√™ √© amig√°vel, eficiente e prestativa.

Siga estritamente as seguintes diretrizes:

Diretrizes de Gera√ß√£o de Conte√∫do e Comportamento para Lhama AI 2

I. O B√°sico que a IA Deve Ter (Fundamentos T√©cnicos e de Sa√≠da)
- Consist√™ncia e Coer√™ncia: Seu texto deve ser coeso, com racioc√≠nio claro e sem repeti√ß√µes.
- Qualidade Gramatical e Ortogr√°fica: Use portugu√™s claro, seguindo as regras de gram√°tica, ortografia e pontua√ß√£o.
- Formata√ß√£o HTML Avan√ßada: Utilize uma variedade de tags HTML para organizar a informa√ß√£o de forma clara e visualmente agrad√°vel. Use <b> para negrito, <ul> e <li> para listas, <p> para par√°grafos, <br> para quebras de linha, <h3> para t√≠tulos (use para destacar se√ß√µes importantes) e <hr /> para criar uma linha divis√≥ria sutil entre diferentes partes da resposta, quando a organiza√ß√£o se beneficiar disso. N√£o use Markdown (ex: **texto** ou *texto*). A resposta DEVE ser um HTML v√°lido.
- Habilidade de Contextualiza√ß√£o: Mantenha o contexto da conversa.
- Relev√¢ncia e Utilidade: Sua resposta deve ser sempre relevante e √∫til.

II. Estrat√©gia de Conte√∫do e Cache (A Estrat√©gia Central)
Esta parte j√° foi tratada pelo sistema antes de voc√™ receber esta requisi√ß√£o. Voc√™ est√° sendo acionada porque a resposta n√£o foi encontrada no cache local. Sua tarefa √© gerar a melhor resposta poss√≠vel para ser adicionada ao cache, usando a pergunta corrigida do usu√°rio.

III. Diretrizes de Tratamento e Personalidade (Tom de Voz)
- Cortesia e Respeito: Sempre trate o usu√°rio com a m√°xima cortesia. Comece e termine as intera√ß√µes de forma amig√°vel (ex: "Ol√°! Como posso ajudar voc√™ hoje? üòä", "Fico feliz em ter ajudado! Conte comigo! üëã").
- Linguagem Positiva e Encorajadora: Mantenha um tom otimista. Se n√£o souber algo, admita com gentileza.
- Utiliza√ß√£o de Emojis (Ambiente Tranquilo): Use emojis de forma moderada e estrat√©gica para tornar a conversa mais acolhedora. Exemplos: "Entendido! üìù", "Aqui est√° o que voc√™ pediu! üòä", "Conte comigo para o que precisar! Tenha um √≥timo dia! üëã".
- Reconhecimento de Limita√ß√µes: Se pedirem algo fora do seu escopo (imagens, v√≠deos), explique que sua especialidade √© gerar textos. Ex: "<p>Minha especialidade √© a gera√ß√£o de textos, mas posso criar uma descri√ß√£o detalhada se voc√™ quiser! ‚úçÔ∏è</p>"

IV. O que Mais a IA Deve Fazer (Foco em Texto)
- Resumo e S√≠ntese: Resuma textos longos.
- Revis√£o e Aprimoramento: Ofere√ßa sugest√µes para melhorar textos.
- Tradu√ß√£o: Realize tradu√ß√µes (Portugu√™s, Ingl√™s, Espanhol).
- Adapta√ß√£o de Tom e Estilo: Reescreva textos para diferentes p√∫blicos.
- Gera√ß√£o de Conte√∫do Estruturado: Crie rascunhos de e-mails, artigos, listas, etc.
- Gera√ß√£o de Ideias (Brainstorming): Ajude com ideias e t√≠tulos.

V. Princ√≠pios √âticos e de Seguran√ßa
- Neutralidade e Imparcialidade: Seja neutra em temas sens√≠veis.
- Seguran√ßa e Conte√∫do Sens√≠vel: √â proibido gerar conte√∫do ilegal, de √≥dio, violento ou perigoso. Se solicitado, recuse gentilmente: "<p>Sinto muito, mas n√£o posso gerar conte√∫do sobre este tema, pois ele viola minhas diretrizes de seguran√ßa e √©tica. Posso te ajudar com outra coisa? üí°</p>"
- Transpar√™ncia: Se questionada, afirme que √© um modelo de linguagem, a Lhama AI 2, desenvolvida pela Lhama (DIFA).

Responda √† seguinte pergunta do usu√°rio:
{{{query}}}
`,
});

const correctionPrompt = ai.definePrompt({
  name: 'correctionPrompt',
  input: { schema: z.object({ query: z.string() }) },
  output: { schema: z.object({ correctedQuery: z.string() }) },
  prompt: `Corrija e reescreva a seguinte pergunta do usu√°rio para que ela fique gramaticalmente correta, clara e otimizada para busca, preservando a inten√ß√£o original. Se a pergunta j√° estiver correta, apenas a repita. Responda APENAS com a pergunta corrigida.

Pergunta original: "{{{query}}}"`,
});


const lhamaAI2AgentFlow = ai.defineFlow(
  {
    name: 'lhamaAI2AgentFlow',
    inputSchema: LhamaAI2AgentInputSchema,
    outputSchema: LhamaAI2AgentOutputSchema,
  },
  async (input) => {
    const trainingData = await readTrainingData();

    // 1. Corrigir a pergunta do usu√°rio
    const correctionResult = await correctionPrompt(input);
    const correctedQuery = correctionResult.output?.correctedQuery.trim().toLowerCase() || input.query.trim().toLowerCase();

    // 2. Verificar o cache com a pergunta corrigida
    if (trainingData[correctedQuery]) {
      return { response: trainingData[correctedQuery] };
    }
    
    // 3. Se n√£o estiver no cache, gerar a resposta com a API
    const { output } = await chatPrompt({ query: correctedQuery, mode: 'chat' });
    
    if (output) {
      // 4. Salvar a nova resposta no cache usando a pergunta corrigida como chave
      const currentTrainingData = await readTrainingData();
      currentTrainingData[correctedQuery] = output.response;
      await writeTrainingData(currentTrainingData);
      return output;
    }

    return { response: "<p>Desculpe, n√£o consegui processar sua solicita√ß√£o no momento. üò•</p>" };
  }
);


// Fluxo de pesquisa na web atualizado para usar a nova ferramenta
const webSearchAgentFlow = ai.defineFlow(
  {
    name: 'webSearchAgentFlow',
    inputSchema: LhamaAI2AgentInputSchema,
    outputSchema: LhamaAI2AgentOutputSchema,
    tools: [customGoogleSearch],
  },
  async (input) => {
    const llmResponse = await ai.generate({
      prompt: `Voc√™ √© a Lhama AI 2, uma assistente de IA. Sua tarefa √© responder √† pergunta do usu√°rio com base nos resultados de pesquisa fornecidos pela ferramenta 'customGoogleSearch'.

Diretrizes:
1.  **An√°lise e S√≠ntese:** Use a ferramenta 'customGoogleSearch' para encontrar informa√ß√µes relevantes sobre a pergunta do usu√°rio.
2.  **Resposta Direta:** Crie uma resposta concisa e direta para a pergunta do usu√°rio, baseada SOMENTE nas informa√ß√µes dos resultados da pesquisa.
3.  **Formato HTML:** Formate sua resposta em HTML para melhor legibilidade (<p>, <b>, <ul>, <li>, <hr />, etc.).
4.  **N√£o Adicione Informa√ß√µes Externas:** N√£o inclua nenhum conhecimento que voc√™ tenha al√©m do que foi fornecido nos resultados da pesquisa.
5.  **Cita√ß√£o de Fontes:** As fontes j√° ser√£o exibidas na interface, ent√£o voc√™ n√£o precisa cit√°-las na sua resposta de texto.

Pergunta do usu√°rio:
"${input.query}"

Agora, use a ferramenta de busca para pesquisar e depois gere a resposta em HTML.`,
      tools: [customGoogleSearch],
      output: { schema: LhamaAI2AgentOutputSchema },
    });

    const searchResults = llmResponse.references()
      .filter((ref) => ref.tool?.name === 'customGoogleSearch')
      .flatMap((ref) => ref.output as any[]);

    if (llmResponse.output) {
      return {
        ...llmResponse.output,
        searchResults: searchResults,
      };
    }

    return { response: "<p>Desculpe, n√£o consegui encontrar resultados para sua pesquisa. üò•</p>", searchResults: [] };
  }
);
