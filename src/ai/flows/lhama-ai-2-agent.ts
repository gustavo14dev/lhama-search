'use server';
/**
 * @fileOverview Lhama AI 2 agent, a default AI agent for the Lhama Search platform.
 *
 * - lhamaAI2Agent - A function that processes user queries and returns AI-generated responses.
 * - LhamaAI2AgentInput - The input type for the lhamaAI2Agent function.
 * - LhamaAI2AgentOutput - The return type for the lhamaAI2Agent function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import { promises as fs } from 'fs';

// Use a relative path from the project root.
const trainingFilePath = 'src/ai/training.json';

type TrainingData = Record<string, string>;

async function readTrainingData(): Promise<TrainingData> {
  try {
    const data = await fs.readFile(trainingFilePath, 'utf-8');
    return JSON.parse(data);
  } catch (error) {
    // If the file doesn't exist, return an empty object
    if ((error as NodeJS.ErrnoException).code === 'ENOENT') {
      return {};
    }
    console.error('Error reading training data:', error);
    return {};
  }
}

async function writeTrainingData(data: TrainingData): Promise<void> {
  try {
    await fs.writeFile(trainingFilePath, JSON.stringify(data, null, 2), 'utf-8');
  } catch (error) {
    console.error('Error writing training data:', error);
  }
}

const LhamaAI2AgentInputSchema = z.object({
  query: z.string().describe('A pergunta do usu√°rio a ser processada pelo agente de IA.'),
});
export type LhamaAI2AgentInput = z.infer<typeof LhamaAI2AgentInputSchema>;

const LhamaAI2AgentOutputSchema = z.object({
  response: z.string().describe('A resposta gerada pela IA para a pergunta do usu√°rio, formatada em HTML.'),
});
export type LhamaAI2AgentOutput = z.infer<typeof LhamaAI2AgentOutputSchema>;

export async function lhamaAI2Agent(input: LhamaAI2AgentInput): Promise<LhamaAI2AgentOutput> {
  return lhamaAI2AgentFlow(input);
}

const prompt = ai.definePrompt({
  name: 'lhamaAI2AgentPrompt',
  input: { schema: LhamaAI2AgentInputSchema },
  output: { schema: LhamaAI2AgentOutputSchema },
  prompt: `Voc√™ √© a Lhama AI 2, uma assistente de IA da empresa Lhama, uma empresa de alta tecnologia da DIFA. Voc√™ √© amig√°vel, eficiente e prestativa.

Siga estritamente as seguintes diretrizes:

Diretrizes de Gera√ß√£o de Conte√∫do e Comportamento para Lhama AI 2

I. O B√°sico que a IA Deve Ter (Fundamentos T√©cnicos e de Sa√≠da)
- Consist√™ncia e Coer√™ncia: Seu texto deve ser coeso, com racioc√≠nio claro e sem repeti√ß√µes.
- Qualidade Gramatical e Ortogr√°fica: Use portugu√™s claro, seguindo as regras de gram√°tica, ortografia e pontua√ß√£o.
- Foco em Texto e Formata√ß√£o: Use formata√ß√£o HTML (<b>, <ul>, <li>, <p>, <br>, <h3>, <hr />) para organizar a informa√ß√£o. N√£o use Markdown (ex: **texto** ou *texto*). A resposta DEVE ser um HTML v√°lido.
- Habilidade de Contextualiza√ß√£o: Mantenha o contexto da conversa.
- Relev√¢ncia e Utilidade: Sua resposta deve ser sempre relevante e √∫til.

II. Estrat√©gia de Conte√∫do e Cache (A Estrat√©gia Central)
Esta parte j√° foi tratada pelo sistema antes de voc√™ receber esta requisi√ß√£o. Voc√™ est√° sendo acionada porque a resposta n√£o foi encontrada no cache local. Sua tarefa √© gerar a melhor resposta poss√≠vel para ser adicionada ao cache, usando a pergunta corrigida do usu√°rio.

III. Diretrizes de Tratamento e Personalidade (Tom de Voz)
- Cortesia e Respeito: Sempre trate o usu√°rio com a m√°xima cortesia. Comece e termine as intera√ß√µes de forma amig√°vel (ex: "Ol√°! Como posso ajudar voc√™ hoje? üòä", "Fico feliz em ter ajudado! Conte comigo! üëã").
- Linguagem Positiva e Encorajadora: Mantenha um tom otimista. Se n√£o souber algo, admita com gentileza.
- Utiliza√ß√£o de Emojis (Ambiente Tranquilo): Use emojis de forma moderada e estrat√©gica para tornar a conversa mais acolhedora. Exemplos: "Entendido! üìù", "Aqui est√° o que voc√™ pediu! üòä", "Conte comigo para o que precisar! Tenha um √≥timo dia! üëã".
- Reconhecimento de Limita√ß√µes: Se pedirem algo fora do seu escopo (imagens, v√≠deos), explique que sua especialidade √© gerar textos. Ex: "<p>Minha especialidade √© a gera√ß√£o de textos, mas posso criar uma descri√ß√£o detalhada se voc√™ quiser! ‚úçÔ∏è</p>"

IV. O que Mais a IA Deve Fazer (Foco em Texto)
- Resumo e S√≠ntese: Resuma textos longos.
- Revis√£o e Aprimoramento: Ofere√ßa sugest√µes para melhorar textos.
- Tradu√ß√£o: Realize tradu√ß√µes (Portugu√™s, Ingl√™s, Espanhol).
- Adapta√ß√£o de Tom e Estilo: Reescreva textos para diferentes p√∫blicos.
- Gera√ß√£o de Conte√∫do Estruturado: Crie rascunhos de e-mails, artigos, listas, etc.
- Gera√ß√£o de Ideias (Brainstorming): Ajude com ideias e t√≠tulos.

V. Princ√≠pios √âticos e de Seguran√ßa
- Neutralidade e Imparcialidade: Seja neutra em temas sens√≠veis.
- Seguran√ßa e Conte√∫do Sens√≠vel: √â proibido gerar conte√∫do ilegal, de √≥dio, violento ou perigoso. Se solicitado, recuse gentilmente: "<p>Sinto muito, mas n√£o posso gerar conte√∫do sobre este tema, pois ele viola minhas diretrizes de seguran√ßa e √©tica. Posso te ajudar com outra coisa? üí°</p>"
- Transpar√™ncia: Se questionada, afirme que √© um modelo de linguagem, a Lhama AI 2, desenvolvida pela Lhama (DIFA).

Responda √† seguinte pergunta do usu√°rio:
{{{query}}}
`,
});

const correctionPrompt = ai.definePrompt({
  name: 'correctionPrompt',
  input: { schema: z.object({ query: z.string() }) },
  output: { schema: z.object({ correctedQuery: z.string() }) },
  prompt: `Corrija e reescreva a seguinte pergunta do usu√°rio para que ela fique gramaticalmente correta e clara, preservando a inten√ß√£o original. Se a pergunta j√° estiver correta, apenas a repita. Responda APENAS com a pergunta corrigida.

Pergunta original: "{{{query}}}"`,
});


const lhamaAI2AgentFlow = ai.defineFlow(
  {
    name: 'lhamaAI2AgentFlow',
    inputSchema: LhamaAI2AgentInputSchema,
    outputSchema: LhamaAI2AgentOutputSchema,
  },
  async (input) => {
    const trainingData = await readTrainingData();

    // 1. Corrigir a pergunta do usu√°rio
    const correctionResult = await correctionPrompt(input);
    const correctedQuery = correctionResult.output?.correctedQuery.trim().toLowerCase() || input.query.trim().toLowerCase();

    // 2. Verificar o cache com a pergunta corrigida
    if (trainingData[correctedQuery]) {
      return { response: trainingData[correctedQuery] };
    }
    
    // 3. Se n√£o estiver no cache, gerar a resposta com a API
    const { output } = await prompt({ query: correctedQuery });
    
    if (output) {
      // 4. Salvar a nova resposta no cache usando a pergunta corrigida como chave
      const currentTrainingData = await readTrainingData();
      currentTrainingData[correctedQuery] = output.response;
      await writeTrainingData(currentTrainingData);
      return output;
    }

    return { response: "<p>Desculpe, n√£o consegui processar sua solicita√ß√£o no momento. üò•</p>" };
  }
);
