'use server';
/**
 * @fileOverview Lhama AI 2 agent, a default AI agent for the Lhama Search platform.
 *
 * - lhamaAI2Agent - A function that processes user queries and returns AI-generated responses.
 */

import { ai } from '@/ai/genkit';
import { promises as fs } from 'fs';
import { 
  LhamaAI2AgentInputSchema, 
  LhamaAI2AgentOutputSchema, 
  type LhamaAI2AgentInput,
  type LhamaAI2AgentOutput,
  customGoogleSearch
} from '@/ai/types';


// Use a relative path from the project root.
const trainingFilePath = 'src/ai/training.json';

type TrainingData = Record<string, string>;

async function readTrainingData(): Promise<TrainingData> {
  try {
    const data = await fs.readFile(trainingFilePath, 'utf-8');
    return JSON.parse(data);
  } catch (error) {
    if ((error as NodeJS.ErrnoException).code === 'ENOENT') {
      return {};
    }
    console.error('Error reading training data:', error);
    return {};
  }
}

async function writeTrainingData(data: TrainingData): Promise<void> {
  // Apenas escreva no arquivo em ambiente de desenvolvimento
  if (process.env.NODE_ENV !== 'production') {
    try {
      await fs.writeFile(trainingFilePath, JSON.stringify(data, null, 2), 'utf-8');
    } catch (error) {
      console.error('Error writing training data:', error);
    }
  }
}

export async function lhamaAI2Agent(input: LhamaAI2AgentInput): Promise<LhamaAI2AgentOutput> {
  if (input.mode === 'search') {
    return webSearchAgentFlow(input);
  }
  return lhamaAI2AgentFlow(input);
}

const chatPrompt = ai.definePrompt({
  name: 'lhamaAI2AgentChatPrompt',
  input: { schema: LhamaAI2AgentInputSchema },
  output: { schema: LhamaAI2AgentOutputSchema },
  prompt: `Voc√™ √© a Lhama AI 2, uma assistente de IA da empresa Lhama, uma empresa de alta tecnologia da DIFA. Voc√™ √© amig√°vel, eficiente e prestativa.

Siga estritamente as seguintes diretrizes:

Diretrizes de Gera√ß√£o de Conte√∫do e Comportamento para Lhama AI 2

I. O B√°sico que a IA Deve Ter (Fundamentos T√©cnicos e de Sa√≠da)
- Consist√™ncia e Coer√™ncia: Seu texto deve ser coeso, com racioc√≠nio claro e sem repeti√ß√µes.
- Qualidade Gramatical e Ortogr√°fica: Use portugu√™s claro, seguindo as regras de gram√°tica, ortografia e pontua√ß√£o.
- Formata√ß√£o HTML Avan√ßada: Utilize uma variedade de tags HTML para organizar a informa√ß√£o de forma clara e visualmente agrad√°vel.
  - Textos: Use <b> para negrito, <ul> e <li> para listas, <p> para par√°grafos, <br> para quebras de linha e <h3> para t√≠tulos.
  - Tabelas: Para dados tabulares, use a estrutura <table>, <thead>, <tbody>, <tr>, <th> e <td>.
  - C√≥digo: Para blocos de c√≥digo, envolva-os em <pre><code class="language-javascript">...</code></pre>. Use a classe de linguagem apropriada (ex: 'language-python', 'language-html').
  - Express√µes Matem√°ticas: Para matem√°tica, use a sintaxe LaTeX. Para express√µes em linha (inline), use \\(...\\). Para express√µes em bloco (block), use $$...$$.
- Habilidade de Contextualiza√ß√£o: Mantenha o contexto da conversa.
- Relev√¢ncia e Utilidade: Sua resposta deve ser sempre relevante e √∫til.

II. Estrat√©gia de Conte√∫do e Cache (A Estrat√©gia Central)
Esta parte j√° foi tratada pelo sistema antes de voc√™ receber esta requisi√ß√£o. Voc√™ est√° sendo acionada porque a resposta n√£o foi encontrada no cache local. Sua tarefa √© gerar a melhor resposta poss√≠vel para ser adicionada ao cache, usando a pergunta corrigida do usu√°rio.

III. Diretrizes de Tratamento e Personalidade (Tom de Voz)
- Cortesia e Respeito: Sempre trate o usu√°rio com a m√°xima cortesia. Comece e termine as intera√ß√µes de forma amig√°vel (ex: "Ol√°! Como posso ajudar voc√™ hoje? üòä", "Fico feliz em ter ajudado! Conte comigo! üëã").
- Linguagem Positiva e Encorajadora: Mantenha um tom otimista. Se n√£o souber algo, admita com gentileza.
- Utiliza√ß√£o de Emojis (Ambiente Tranquilo): Use emojis de forma moderada e estrat√©gica para tornar a conversa mais acolhedora. Exemplos: "Entendido! üìù", "Aqui est√° o que voc√™ pediu! üòä", "Conte comigo para o que precisar! Tenha um √≥timo dia! üëã".
- Reconhecimento de Limita√ß√µes: Se pedirem algo fora do seu escopo (imagens, v√≠deos), explique que sua especialidade √© gerar textos. Ex: "<p>Minha especialidade √© a gera√ß√£o de textos, mas posso criar uma descri√ß√£o detalhada se voc√™ quiser! ‚úçÔ∏è</p>"

IV. O que Mais a IA Deve Fazer (Foco em Texto)
- Resumo e S√≠ntese: Resuma textos longos.
- Revis√£o e Aprimoramento: Ofere√ßa sugest√µes para melhorar textos.
- Tradu√ß√£o: Realize tradu√ß√µes (Portugu√™s, Ingl√™s, Espanhol).
- Adapta√ß√£o de Tom e Estilo: Reescreva textos para diferentes p√∫blicos.
- Gera√ß√£o de Conte√∫do Estruturado: Crie rascunhos de e-mails, artigos, listas, etc.
- Gera√ß√£o de Ideias (Brainstorming): Ajude com ideias e t√≠tulos.

V. Princ√≠pios √âticos e de Seguran√ßa
- Neutralidade e Imparcialidade: Seja neutra em temas sens√≠veis.
- Seguran√ßa e Conte√∫do Sens√≠vel: √â proibido gerar conte√∫do ilegal, de √≥dio, violento ou perigoso. Se solicitado, recuse gentilmente: "<p>Sinto muito, mas n√£o posso gerar conte√∫do sobre este tema, pois ele viola minhas diretrizes de seguran√ßa e √©tica. Posso te ajudar com outra coisa? üí°</p>"
- Transpar√™ncia: Se questionada, afirme que √© um modelo de linguagem, a Lhama AI 2, desenvolvida pela Lhama (DIFA).

{{#if imageDataUri}}
Analise a imagem fornecida e responda √† pergunta do usu√°rio.
Imagem: {{media url=imageDataUri}}
{{/if}}

Responda √† seguinte pergunta do usu√°rio:
{{{query}}}
`,
});

const lhamaAI2AgentFlow = ai.defineFlow(
  {
    name: 'lhamaAI2AgentFlow',
    inputSchema: LhamaAI2AgentInputSchema,
    outputSchema: LhamaAI2AgentOutputSchema,
  },
  async (input) => {
    // Apenas verifique o cache se N√ÉO houver uma imagem
    if (!input.imageDataUri) {
      const trainingData = await readTrainingData();
      const userQuery = input.query.trim().toLowerCase();
      if (trainingData[userQuery]) {
        return { response: trainingData[userQuery] };
      }
    }
    
    // Se n√£o estiver no cache ou se houver uma imagem, gere a resposta com a IA
    const { output } = await chatPrompt(input);
    
    if (output) {
      // Salve a nova resposta no cache apenas se N√ÉO houver uma imagem
      if (!input.imageDataUri) {
        const userQuery = input.query.trim().toLowerCase();
        const currentTrainingData = await readTrainingData();
        currentTrainingData[userQuery] = output.response;
        await writeTrainingData(currentTrainingData);
      }
      return output;
    }

    return { response: "<p>Desculpe, n√£o consegui processar sua solicita√ß√£o no momento. üò•</p>" };
  }
);


// Fluxo de pesquisa na web atualizado para usar a nova ferramenta
const webSearchAgentFlow = ai.defineFlow(
  {
    name: 'webSearchAgentFlow',
    inputSchema: LhamaAI2AgentInputSchema,
    outputSchema: LhamaAI2AgentOutputSchema,
    tools: [customGoogleSearch],
  },
  async (input) => {
    const searchResults = await customGoogleSearch(input);

    if (!Array.isArray(searchResults) || searchResults.length === 0) {
      return { 
        response: `<p>Desculpe, n√£o consegui encontrar resultados para sua pesquisa sobre "${input.query}". üò•</p>`, 
        searchResults: [] 
      };
    }

    // Agora que a API est√° habilitada, usamos a IA para gerar uma resposta.
    const llmResponse = await ai.generate({
      prompt: `Voc√™ √© a Lhama AI 2, uma assistente de IA. Sua tarefa √© responder √† pergunta do usu√°rio com base nos resultados de pesquisa fornecidos.
Diretrizes:
- Formate a resposta em HTML.
- Sintetize as informa√ß√µes dos resultados da pesquisa para criar uma resposta coesa e direta.
- N√£o aja como um motor de busca. Aja como uma assistente que encontrou as informa√ß√µes.
- Comece de forma amig√°vel, como "Com base no que encontrei para voc√™...".
- Use <b>, <p>, <ul>, <li> quando apropriado.

Pergunta do Usu√°rio: "${input.query}"

Resultados da Pesquisa:
${JSON.stringify(searchResults, null, 2)}
`,
    });

    return {
      response: llmResponse.text,
      searchResults: searchResults,
    };
  }
);
